// vim: ft=c et sw=4
//
// * 333e7a8 - Run function validation only when not NDEBUG
//
// One vreg out of two (t10, t14) is spilled even though they are the only ones
// left. The problem is that they both live across a call and this means a lot
// of interferences. At the moment only rbx is preserved across calls and it
// failed to be assigned in this case?

//function0:
//f:
//.BB0:
//	push rbp
//	mov rbp, rsp
//	sub rsp, 8
//	test rdi, rdi
//	jz .BB3
//	jmp .BB2
//.BB3:
//	mov rax, 3
//	jmp .BB4
//.BB2:
//	mov rax, 4
//	jmp .BB4
//.BB4:
//	mov rsp, rbp
//	pop rbp
//	ret
//
//function1:
//g:
//.BB0:
//	push rbp
//	mov rbp, rsp
//	sub rsp, 8
//	test rdi, rdi
//	jz .BB3
//	jmp .BB2
//.BB3:
//	mov rax, 3
//	jmp .BB5
//.BB2:
//	mov rax, 4
//	jmp .BB5
//.BB5:
//	mov rsp, rbp
//	pop rbp
//	ret
//
//function2:
//main:
//.BB0:
//	push rbp
//	mov rbp, rsp
//	sub rsp, 16
//	mov rdi, 1
//	call function0
//	mov [rbp-16], rax
//	mov rdi, 0
//	call function1
//	mov rcx, rax
//	mov rax, [rbp-16]
//	add rax, rcx
//	mov rsp, rbp
//	pop rbp
//	ret

int f(int a) {
    int b = 3;
    if (a) {
        b = 4;
    }
    return b;
}

int g(int a) {
    if (a) {
        return 4;
    } else {
        return 3;
    }
}

int main() {
    return f(1) + g(0);
}
